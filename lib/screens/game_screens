import "package:flutter/material.dart";
import "package:shared_preferences/shared_preferences.dart";
import "../constants/constants.dart"; 

// Constante de la lógica
const int maxIntentosIncorrectos = 6;

// El Widget de la Pantalla del Juego (StatefulWidget)
class GameScreen extends StatefulWidget {
  const GameScreen({super.key});

  @override
  State<GameScreen> createState() => _GameScreenState();
}

// La Clase de Estado 
class _GameScreenState extends State<GameScreen> {
  // Variables de Estado
  late String _palabraSecreta;
  List<String> _letrasAdivinadas = [];
  int _intentosIncorrectos = 0;

  // Variables para la persistencia
  late SharedPreferences _prefs;
  int _conteoPartidasSesion = 0;
  int _totalGanadas = 0;
  int _totalJugadas = 0;

  // Lógica de estado final
  // Función: Verifica si el jugador ganó
  bool _siGano() {
    return !obtenerPalabraOculta().contains("");
  }

  // Función: Verifica si el jugador perdió
  bool _siPerdio() {
    return _intentosIncorrectos >= maxIntentosIncorrectos;
  }

  // Ciclo de vida: Inicializa estado y carga datos
  @override
  void initState() {
    super.initState();
    _seleccionarNuevaPalabra(); // Inicialización de palabra secreta
    _cargarPuntuaciones(); // Carga de historial de puntuaciones
  }


  // Función: Carga el historial de puntuaciones
  void _cargarPuntuaciones() async {
    _prefs = await SharedPreferences.getInstance();
    setState(() {
      _totalGanadas = _prefs.getInt("gamesWon") ?? 0;
      _totalJugadas = _prefs.getInt("gamesPlayed") ?? 0;
    });
  }

  // Función: Guarda las puntuaciones actuales
  void _guardarPuntuaciones() {
    _prefs.setInt("gamesWon", _totalGanadas);
    _prefs.setInt("gamesPlayed", _totalJugadas);
  }

  // Función: Actualiza los contadores al final del juego
  void _manejarFinDeJuego(bool siGano) {
    if (siGano) {
      _totalGanadas++;
    }
    _totalJugadas++;
    _guardarPuntuaciones();
  }

  // LÓGICA DEL JUEGO 

  void _seleccionarNuevaPalabra() {
    // Creación de una COPIA mutable de la lista para barajar.
    final List<String> mutableWordList = List.from(listaPalabras);
    
    mutableWordList.shuffle(); 
    
    // Asignación de la palabra secreta.
    _palabraSecreta = mutableWordList.first;
  }
  
  // Restablece el estado del juego para una nueva partida
  void _reiniciarJuego() {
    setState(() {
      _conteoPartidasSesion++; // Incremento del contador de sesión
      _seleccionarNuevaPalabra();
      _letrasAdivinadas = [];
      _intentosIncorrectos = 0;
    });
  }

  // Maneja el intento de una letra
  void _adivinarLetra(String letra) { 
    // Evita intentos si el juego terminó.
    if (_siPerdio() || _siGano()) return;

    setState(() {
      final letraNormalizada = letra.toUpperCase();

      // Comprobación de letra repetida.
      if (_letrasAdivinadas.contains(letraNormalizada)) {
        return;
      }

      _letrasAdivinadas.add(letraNormalizada);

      // Lógica para intento incorrecto.
      if (!_palabraSecreta.contains(letraNormalizada)) {
        _intentosIncorrectos++;
      }

      // Lógica de final de juego.
      final bool siGano = _siGano();
      final bool siPerdio = _siPerdio();
      
      if (siGano) {
        _manejarFinDeJuego(true);
      } else if (siPerdio) {
        _manejarFinDeJuego(false);
      }
    });
  }
  
// Genera la palabra con guiones bajos
  String _obtenerPalabraOculta() {
    String display = "";
    for (int i = 0; i < _palabraSecreta.length; i++) {
      String char = _palabraSecreta[i];
      if (_letrasAdivinadas.contains(char)) {
        display += "$char ";
      } else {
        display += "_ ";
      }
    }
    return display.trim();
  }

  // Muñeco del Ahorcado
  String _obtenerArteAhorcado() {
    const List<String> hangmanSteps = [
      // 0 fallos
      """
  +---+
  |   |
      |
      |
      |
      |
=========""",
      // 1 fallo
      """
  +---+
  |   |
  O   |
      |
      |
      |
=========""",
      // 2 fallos
      """
  +---+
  |   |
  O   |
  |   |
      |
      |
=========""",
      // 3 fallos
      """
  +---+
  |   |
  O   |
 /|   |
      |
      |
=========""",
      // 4 fallos
      """
  +---+
  |   |
  O   |
 /|\\  |
      |
      |
=========""",
      // 5 fallos
      """
  +---+
  |   |
  O   |
 /|\\  |
 /    |
      |
=========""",
      // 6 fallos (Perdió)
      """
  +---+
  |   |
  O   |
 /|\\  |
 / \\  |
      |
=========""",
    ];
    // Mapeo de fallos al índice del muñeco.
    final index = _intentosIncorrectos.clamp(0, hangmanSteps.length - 1);
    return hangmanSteps[index];
  }


  // WIDGET BUILD 
  @override
  Widget build(BuildContext context) {
    // Declaración de estado del juego usando las funciones en español
    final siGano = _siGano();
    final siPerdio = _siPerdio();
    final mensajeEstadoJuego = siGano
        ? "¡GANASTE!"
        : siPerdio
            ? "¡PERDISTE! La palabra era: $_palabraSecreta"
            : "";

    return Scaffold(
      appBar: AppBar(
        title: const Text("Juego del Ahorcado "),
        centerTitle: true,
        backgroundColor: Colors.blueGrey[900],
      ),
      body: SingleChildScrollView( 
        child: Center(
          child: Column( 
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              const SizedBox(height: 20),

              // Indicadores de Puntuación 
              Text(
                // Uso de las variables renombradas
                "Partidas en la sesión: $_conteoPartidasSesion",
                style: const TextStyle(fontSize: 14, color: Colors.white70),
              ),
              Text(
                "Histórico - Ganadas: $_totalGanadas / Jugadas: $_totalJugadas",
                style: const TextStyle(fontSize: 14, color: Colors.white70),
              ),
              const SizedBox(height: 10),
              
              // Muñeco del Ahorcado (Visual)
              Text(
                _obtenerArteAhorcado(), // Función renombrada
                style: const TextStyle(
                    fontFamily: "monospace",
                    fontSize: 14,
                    color: Colors.white),
              ),